// 1 float to fixed 3 RGB rainbow Function
fixed3 rainbow(float h) {
        h = fmod(fmod(h, 1.0) + 1.0, 1.0);
        float h6 = h * 6.0;
        float r = clamp(h6 - 4.0, 0.0, 1.0) +
            clamp(2.0 - h6, 0.0, 1.0);
        float g = h6 < 2.0
            ? clamp(h6, 0.0, 1.0)
            : clamp(4.0 - h6, 0.0, 1.0);
        float b = h6 < 4.0
            ? clamp(h6 - 2.0, 0.0, 1.0)
            : clamp(6.0 - h6, 0.0, 1.0);
        return fixed3(r, g, b);
    }

float3 RGBtoHSV()
{
        float4 K = float4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
        float3 p = abs(frac(input.xxx + K.xyz) * 6.0 - K.www);
        return input.z * lerp(K.xxx, saturate(p - K.xxx), input.y);
}



//    ------  Below are from Gdot posts so they may need to be converted and tested   ------  https://github.com/paddy-exe/ShaderFunction-Extras/blob/main/addons/ShaderFunction-Extras/Color/color_adjustment.gdshaderinc

float grayscale(vec3 color) {
	float max1 = max(color.r, color.g);
	float max2 = max(max1, color.b);
	return max2;
}

vec3 hsv_to_rgb(vec3 color) {
	vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
	vec3 p = abs(fract(color.xxx + K.xyz) * 6.0 - K.www);
	return color.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), color.y);
}

vec3 rgb_to_hsv(vec3 color) {
	vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
	vec4 p = mix(vec4(color.bg, K.wz), vec4(color.gb, K.xy), step(color.b, color.g));
	vec4 q = mix(vec4(p.xyw, color.r), vec4(color.r, p.yzx), step(p.x, color.r));
	float d = q.x - min(q.w, q.y);
	float e = 1.0e-10;
	return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}

vec3 hsv_adjustment(vec3 col, float hue_offset, float sat_offset, float val_offset) {
	vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
	vec4 p = mix(vec4(col.bg, K.wz), vec4(col.gb, K.xy), step(col.b, col.g));
	vec4 q = mix(vec4(p.xyw, col.r), vec4(col.r, p.yzx), step(p.x, col.r));
	float d = q.x - min(q.w, q.y);
	float e = 1.0e-10;
	vec3 hsv = vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
	hsv.x += hue_offset / 360.0;
	hsv.y += sat_offset;
	hsv.z += val_offset;
	return hsv;
}
